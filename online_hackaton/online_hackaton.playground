// Доброго дня тому кто будет смотреть мой код, справедливости ради скажу что приложенное видео дало нужный толчек в понимании как должно было все выглядить в целом, но сам код пытался уже сам делать. Может где-то перемудрил но в стране где я живу дипозитные счета не доступны в банкоматах =), поэтому часть логики взята из воздуха

// Абстракция данных пользователя
protocol UserData {
  var userName: String { get }    //Имя пользователя
  var userCardId: String { get }   //Номер карты
  var userCardPin: Int { get }       //Пин-код
  var userPhone: String { get }       //Номер телефона
  var userCash: Float { get set }   //Наличные пользователя
  var userBankDeposit: Float { get set }   //Банковский депозит
  var userPhoneBalance: Float { get set }    //Баланс телефона
  var userCardBalance: Float { get set }    //Баланс карты
}

struct User: UserData{
    var userName: String     //Имя пользователя
    var userCardId: String   //Номер карты
    var userCardPin: Int        //Пин-код
    var userPhone: String        //Номер телефона
    var userCash: Float    //Наличные пользователя
    var userBankDeposit: Float    //Банковский депозит
    var userPhoneBalance: Float     //Баланс телефона
    var userCardBalance: Float    //Баланс карты
    
}

// Действия, которые пользователь может выбирать в банкомате (имитация кнопок)
enum UserActions {
    case getBalanceByCardAndDeposit
    case getMoneyByCardAndDeposit
    case depositMoneyToCardAndDeposit
    case transferMoneyToPhone(phone: String)
}

// Виды операций, выбранных пользователем (подтверждение выбора)
enum DescriptionTypesAvailableOperations: String {
    case getBalanseFromCard = "Выбрана операция проверки баланса карты"
    case getBalanseFromDeposit = "Выбрана операция проверки баланса депазита"
    case getBalanseFromCash = "Выбрана операция проверки кармана штанов"
    case phoneBalanse = "Выбрана операция проверки баланса телефона"
    case cashDepositToDeposit = "Выбрана операция поплнение депозита наличными"
    case cardDepositToDeposit = "Выбрана операция поплнение депозита с карты"
    case cashDepoditToCard = "Выбрана операция пополнение карты налчиными"
    case depositDepositToCard = "Выбрана операция пополнение карты с депозита"
    case getMoneyFromDeposit = "Выбрана операция снятие средств с депозита"
    case getMoneyFromCard = "Выбрана операция снятие средств с карты"
    case getMoney = "Выбрана операция траты денег из наличных средств"
    case depositToCash = "Выбрана операция пополнение наличных из заначки в карман"
    case payToPhone = "Выбрана операция оплата за телефон"
}

// Способ оплаты/пополнения наличными, картой или через депозит
enum PaymentMethod {
    case cash(cash: Float)
    case card(card: Float)
    case deposit(deposit: Float)
}

// Тексты ошибок
enum TextErrors: String {
    case notEnoughMoneyOnDeposit = "Недостаточно средств на депозите"
    case notEnoughMoneyOnCash = "Недостаточно средств наличными"
    case notEnoughMoneyOnCard = "Недостаточно средств на карте"
    case userNameIncorrect = "Введено не верное имя пользователя"
    case userCardIdIncorrect = "введен не верный номер карты"
    case userPinIncorrect = "введен не верный пин карты"
    case userPhoneIncorrect = "Введен не верный номер телефона"
}

// Протокол по работе с банком предоставляет доступ к данным пользователя зарегистрированного в банке
protocol BankApi {
    func showName()->String
    func showUserCardBalance()->String
    func showUserDepositBalance()->String
    func showUserCashBalance()-> String
    func showUserToppedUpMobilePhoneCash(cash: Float)
    func showUserToppedUpMobilePhoneCard(card: Float)
    func showUserToppedUpMobilePhoneDeposit(deposit: Float)
    func showWithdrawalCard(cash: Float)
    func showWithdrawalDeposit(cash: Float)
    func showWithdrawalCash(cash: Float)
    func showTopUpCard(cash: Float)
    func showTopUpDeposit(cash: Float)
    func showTopUpCash(cash: Float)
    func showError(error: TextErrors)
    func showChooseOperation(operation: DescriptionTypesAvailableOperations)
 
    func checkUserPhone(phone: String) -> Bool
    func checkMaxUserCash(cash: Float) -> Bool
    func checkMaxUserCard(withdraw: Float) -> Bool
    func checkMaxUserDeposit(deposit: Float) -> Bool
    func checkCurrentUser(userCardId: String, userCardPin: Int) -> Bool
 
    mutating func topUpPhoneBalanceCash(pay: Float)
    mutating func topUpPhoneBalanceCard(pay: Float)
    mutating func topUpPhoneBalanceDeposit(pay: Float)
    mutating func getCashFromDeposit(cash: Float)
    mutating func getCashFromCard(cash: Float)
    mutating func putCashDeposit(topUp: Float)
    mutating func putCashCard(topUp: Float)
    mutating func putCashCash(topUp: Float)
}

struct Bank: BankApi{
    private var user: UserData
    
    init(user: UserData){
        self.user = user
    }
    
    func showName()->String{
        return user.userName
    }
    
    func showUserCardBalance()->String{
        "на балансе карты \(user.userCardBalance) сум"
    }
    func showUserDepositBalance()-> String{
        "на балансе депозита \(user.userBankDeposit) сум"
    }
    func showUserCashBalance()-> String{
        "в кошельке \(user.userCash) сум"
    }
    func showUserToppedUpMobilePhoneCash(cash: Float){
        let report = """
        Баланс вашего телефона  \(user.userPhone) пополнен и состовляет \(user.userPhoneBalance) сум наличными средствами.
        
        """
        print(report)
    }
    func showUserToppedUpMobilePhoneCard(card: Float){
        let report = """
        Баланс вашего телефона  \(user.userPhone) пополнен и состовляет \(user.userPhoneBalance) сум с карты.
        
        """
        print(report)
    }
    func showUserToppedUpMobilePhoneDeposit(deposit: Float){
        let report = """
        Баланс вашего телефона  \(user.userPhone) пополнен и состовляет \(user.userPhoneBalance) сум с депозитного счета.
        
        """
        print(report)
    }
    func showWithdrawalCard(cash: Float){
        let report = """
        Снятие средств с карты, сумма наличных составляет \(user.userCash) сум.
        
        """
        print(report)
    }
    func showWithdrawalDeposit(cash: Float){
        let report = """
        Снятие средств с депозита, сумма наличных составляет \(user.userCash) сум.
        
        """
        print(report)
    }
    func showWithdrawalCash(cash: Float){
        let report = """
        Баланс вашего кошелька \(user.userCash) сум после трат вне банкомата.
        
        """
        print(report)
    }
    func showTopUpCard(cash: Float){
        let report = """
        Баланс карты пополнен наличными средствами и теперь состовляет \(user.userCardBalance) сум.
        
        """
        print(report)
    }
    func showTopUpDeposit(cash: Float){
        let report = """
        Баланс депозита пополнен наличными средствами и теперь состовляет \(user.userBankDeposit) сум.
        
        """
        print(report)
    }
    func showTopUpCash(cash: Float){
        let report = """
        Пополнен баланс кошелька с наличными из заначки и теперь состовляет \(user.userCash) сум.
        
        """
        print(report)
    }
    func showError(error: TextErrors){
        print(error.rawValue)
    }
    func showChooseOperation(operation: DescriptionTypesAvailableOperations){
        print(operation.rawValue)
    }
 
    func checkUserPhone(phone: String) -> Bool{
        if user.userPhone == phone {
            return true
        }
        return false
    }
    func checkMaxUserCash(cash: Float) -> Bool{
        if cash <= user.userCash{
            return true
        }
        return false
    }
    func checkMaxUserCard(withdraw: Float) -> Bool{
        if withdraw <= user.userCardBalance{
            return true
        }
        return false
    }
    func checkMaxUserDeposit(deposit: Float) -> Bool{
        if deposit <= user.userBankDeposit{
            return true
        }
        return false
    }
    func checkCurrentUser(userCardId: String, userCardPin: Int) -> Bool{
        if userCardId == user.userCardId && userCardPin == user.userCardPin{
            return true
        }
        return false
    }
 
    mutating func topUpPhoneBalanceCash(pay: Float){
        user.userPhoneBalance += pay
        user.userCash -= pay
    }
    mutating func topUpPhoneBalanceCard(pay: Float){
        user.userPhoneBalance += pay
        user.userCardBalance -= pay
    }
    mutating func topUpPhoneBalanceDeposit(pay: Float){
        user.userPhoneBalance += pay
        user.userBankDeposit -= pay
    }
    mutating func getCashFromDeposit(cash: Float){
        user.userCardBalance -= cash
        user.userCash += cash
    }
    mutating func getCashFromCard(cash: Float){
        user.userBankDeposit -= cash
        user.userCash += cash
    }
    mutating func putCashDeposit(topUp: Float){
        user.userBankDeposit += topUp
    }
    mutating func putCashCard(topUp: Float){
        user.userCardBalance += topUp
    }
    mutating func putCashCash(topUp: Float){
        user.userCash += topUp
    }
}

// Банкомат, с которым мы работаем, имеет общедоступный интерфейс sendUserDataToBank
class ATM {
    private let userCardId: String
    private let userCardPin: Int
    private var someBank: BankApi
    private let action: UserActions
    private let paymentMethod: PaymentMethod?
 
    init(userCardId: String, userCardPin: Int, someBank: BankApi, action: UserActions, paymentMethod: PaymentMethod? = nil) {
        self.userCardId = userCardId
        self.userCardPin = userCardPin
        self.someBank = someBank
        self.action = action
        self.paymentMethod = paymentMethod
 
        sendUserDataToBank(userCardId: userCardId, userCardPin: userCardPin, actions: action, payment: paymentMethod)
  }
    
    private func showBalance(){
        let card = someBank.showUserCardBalance
        let deposit = someBank.showUserDepositBalance
        let cash = someBank.showUserCashBalance
        
        print("""
        \(card()),
        \(deposit()),
        и \(cash())
        """)
    }
 
  public final func sendUserDataToBank(userCardId: String, userCardPin: Int, actions: UserActions, payment: PaymentMethod?) {
      let correctUserData = someBank.checkCurrentUser(userCardId: userCardId, userCardPin: userCardPin)
      
      //Проверка номера карты и пинкода карты
      if correctUserData{
          print(" \n---------- Дорогой \(someBank.showName()) -----------\n ")
          
          //Выбор метода действия
          switch actions{
              
          //Проверка баланса на всех возможных кошельках
          case .getBalanceByCardAndDeposit:
              switch payment{
              case .card(card: _):
                  someBank.showChooseOperation(operation: .getBalanseFromCard)
                  print(someBank.showUserCardBalance())
              case .deposit(deposit: _):
                  someBank.showChooseOperation(operation: .getBalanseFromDeposit)
                  print(someBank.showUserDepositBalance())
              case .cash(cash: _):
                  someBank.showChooseOperation(operation: .getBalanseFromCash)
                  print(someBank.showUserCashBalance())
              case .none:
                  break
              }
          //Снятие средств со счетов и нала
          case .getMoneyByCardAndDeposit:
              switch payment{
              case let .card(card: payment):
                  if someBank.checkMaxUserCash(cash: payment){
                      someBank.showChooseOperation(operation: .getMoneyFromCard)
                      someBank.getCashFromCard(cash: payment)
                      someBank.showWithdrawalCard(cash: payment)
                      showBalance()
                  }
              case let .deposit(deposit: payment):
                  if someBank.checkMaxUserCash(cash: payment){
                      someBank.showChooseOperation(operation: .getMoneyFromDeposit)
                      someBank.getCashFromDeposit(cash: payment)
                      someBank.showWithdrawalDeposit(cash: payment)
                      showBalance()
                  }
              case let .cash(cash: payment):
                  someBank.showChooseOperation(operation: .getMoney)
                  someBank.topUpPhoneBalanceCash(pay: payment)
                  someBank.showWithdrawalCash(cash: payment)
                  showBalance()
              case .none:
                  break
              }
          //Пополнение баланса всего что есть
          case .depositMoneyToCardAndDeposit:
              switch payment{
              case let .cash(cash: payment):
                  someBank.showChooseOperation(operation: .depositToCash)
                  someBank.putCashCash(topUp: payment)
                  someBank.showTopUpCash(cash: payment)
                  showBalance()
              case let .card(card: payment):
                  someBank.showChooseOperation(operation: .cashDepoditToCard)
                  someBank.putCashCard(topUp: payment)
                  someBank.showTopUpCard(cash: payment)
                  showBalance()
              case let .deposit(deposit: payment):
                  someBank.showChooseOperation(operation: .cashDepositToDeposit)
                  someBank.putCashDeposit(topUp: payment)
                  someBank.showTopUpDeposit(cash: payment)
                  showBalance()
              case .none:
                  break
              }
              
          //Пополнение счета на телефоне
          case let .transferMoneyToPhone(phone):
              if someBank.checkUserPhone(phone: phone){
                  someBank.showChooseOperation(operation: .payToPhone)
                  let payment = payment
                  switch payment{
                  case let .cash(cash: payment):
                      if someBank.checkMaxUserCash(cash: payment){
                          someBank.topUpPhoneBalanceCash(pay: payment)
                          someBank.showUserToppedUpMobilePhoneCash(cash: payment)
                          showBalance()
                      }else{
                          someBank.showError(error: .notEnoughMoneyOnCash)
                      }
                  case let .card(card: payment):
                      if someBank.checkMaxUserCard(withdraw: payment){
                          someBank.topUpPhoneBalanceCard(pay: payment)
                          someBank.showUserToppedUpMobilePhoneCard(card: payment)
                          showBalance()
                      }else{
                          someBank.showError(error: .notEnoughMoneyOnCard)
                      }
                  case let .deposit(deposit: payment):
                      if someBank.checkMaxUserDeposit(deposit: payment){
                          someBank.topUpPhoneBalanceDeposit(pay: payment)
                          someBank.showUserToppedUpMobilePhoneDeposit(deposit: payment)
                          showBalance()
                      }else{
                          someBank.showError(error: .notEnoughMoneyOnDeposit)
                      }
                  case .none:
                      break
                  }
              }else{
                  someBank.showError(error: .userPhoneIncorrect)
              }
              
          }
      }else{
          print(" \n---------- Ошибка, возможные причины --------------\n ")
          someBank.showError(error: .userCardIdIncorrect)
          someBank.showError(error: .userPinIncorrect)
      }
  }
}
  
//Добавить пользователся

let napoleonBanopart: User = User(
    userName: "Наполеон Банапарт",
    userCardId: "8600 4342 2378 3327",
    userCardPin: 9786,
    userPhone: "+99890 747-65-34",
    userCash: 5000,
    userBankDeposit: 10000,
    userPhoneBalance: -150,
    userCardBalance: 2500)


let nationalBank: Bank = Bank(user: napoleonBanopart)

let atm: ATM = ATM(userCardId: "8600 4342 2378 3327",
                   userCardPin: 9786,
                   someBank: nationalBank,
                   action: .transferMoneyToPhone(phone: "+99890 747-65-34"),
                   paymentMethod: .deposit(deposit: 2533))

atm.sendUserDataToBank(
    userCardId: "8600 4342 2378 3327",
    userCardPin: 9786,
    actions: .getMoneyByCardAndDeposit,
    payment: .card(card: 1000))

atm.sendUserDataToBank(
    userCardId: "8600 4342 2378 3327",
    userCardPin: 9786,
    actions: .getMoneyByCardAndDeposit,
    payment: .cash(cash: 50))

atm.sendUserDataToBank(
    userCardId: "8600 4342 2378 3327",
    userCardPin: 9786,
    actions: .depositMoneyToCardAndDeposit,
    payment: .cash(cash: 50))

atm.sendUserDataToBank(
    userCardId: "8600 4342 2378 3327",
    userCardPin: 9786,
    actions: .depositMoneyToCardAndDeposit,
    payment: .cash(cash: 51234))

atm.sendUserDataToBank(
    userCardId: "8600 4342 2378 3327",
    userCardPin: 9786,
    actions: .transferMoneyToPhone(phone: "+99890 747-65-34"),
    payment: .cash(cash: 55000))

atm.sendUserDataToBank(
    userCardId: "8600 4342 2378 3327",
    userCardPin: 9786,
    actions: .transferMoneyToPhone(phone: "+99890 747-65-34"),
    payment: .card(card: 24000))

atm.sendUserDataToBank(
    userCardId: "8600 4342 2378 3327",
    userCardPin: 9786,
    actions: .transferMoneyToPhone(phone: "+99890 747-65-34"),
    payment: .card(card: 240))

atm.sendUserDataToBank(
    userCardId: "8600 4342 2378 3327",
    userCardPin: 9786,
    actions: .getBalanceByCardAndDeposit,
    payment: .card(card: .nan))

// Добавил нового пользователся для проверки многозадачности

let jackNikolson: User = User(
    userName: "Джек Николсон",
    userCardId: "8600 0527 3348 5586",
    userCardPin: 7777,
    userPhone: "+1 453 556 43 23",
    userCash: 12000,
    userBankDeposit: 3500000,
    userPhoneBalance: 150,
    userCardBalance: 12500000)

let nationalBank2: Bank = Bank(user: jackNikolson)

let atm2: ATM = ATM(userCardId: "8600 0527 3348 5586",
                    userCardPin: 7777,
                    someBank: nationalBank2,
                    action: .getBalanceByCardAndDeposit,
                    paymentMethod: .card(card: .nan))
atm2.sendUserDataToBank(
    userCardId: "8600 0527 3348 5586",
    userCardPin: 7777,
    actions: .transferMoneyToPhone(phone: "+1 453 556 43 23"),
    payment: .card(card: 12010))
