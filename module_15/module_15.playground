//–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫
enum WebErrors: Error{
    case error400 //Bad request
    case error404 //Not found
    case error500 //Internal server error
}

//–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—à–∏–±–æ–∫
var error400 = false
var error404 = false
var error500 = true

//–°–æ–∑–¥–∞—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
func webErrors()throws{
    if error400{throw WebErrors.error400}
    if error404{throw WebErrors.error404}
    if error500{throw WebErrors.error500}
}

//–ü—Ä–∏ –ø–æ–º–æ—â–∏ do-catch —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
do{
//    if error400{throw WebErrors.error400}
//    if error404{throw WebErrors.error404}
//    if error500{throw WebErrors.error500}
    
    // –î–æ–±–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    try webErrors()
}catch WebErrors.error400{
    print("Error 400 - Bad request")
}catch WebErrors.error404{
    print("Error 404 - Page not found")
}catch WebErrors.error500{
    print("Error 500 - Internal server error")
}

print("--------------------------")
//–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –Ω–∞ –≤—Ö–æ–¥ –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ª–∏ –æ–Ω–∏
let typeOne: String = "String"
let typeTwo: Int = 42
let typeThree: String = "World without hello"

func compareTypes <T,N>(type1: T,type2: N){
    if type(of: T.self) == type(of: N.self){
        print("Yes")
    }else{
        print("No")
    }
}
compareTypes(type1: error400, type2: error500)
compareTypes(type1: typeOne, type2: typeTwo)
compareTypes(type1: error404, type2: typeTwo)

print("--------------------------")
//–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ç–æ–∂–µ —Å–∞–º–æ–µ, –Ω–æ –µ—Å–ª–∏ —Ç–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è, –≤—ã–±—Ä–æ—Å–∏—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ. –ï—Å–ª–∏ —Ç–∏–ø –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π - —Ç–æ–∂–µ –≤—ã–±—Ä–æ—Å–∏—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –Ω–æ –æ–Ω–æ –±—É–¥–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å —á—Ç–æ —Ç–∏–ø—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
var identicalTypes: Bool = false
var differentTypes: Bool = false

enum Exception: Error{
    case identicalTypes
    case differentTypes
}
func compareTypesException()throws{
    if identicalTypes {throw Exception.identicalTypes}
    if differentTypes {throw Exception.differentTypes}
}

func compareTypes2 <T,N>(type1: T,type2: N)throws{
    if type(of: T.self) == type(of: N.self){
        print("\(type(of: type1)) == \(type(of: type2))")
        identicalTypes = true
        differentTypes = false
    }else{
        print("\(type(of: type1)) != \(type(of: type2))")
        identicalTypes = false
        differentTypes = true
    }
    do {
        try compareTypesException()
    }catch Exception.identicalTypes{
        print("There are types is equal")
    }catch Exception.differentTypes{
        print("There are types isn't equal")
    }
}

try compareTypes2(type1: 14, type2: 23)
try compareTypes2(type1: "2", type2: 2)
try compareTypes2(type1: typeThree, type2: typeOne)
try compareTypes2(type1: "üíª", type2: 4.6)

print("--------------------------")
//–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–≤–∞ –ª—é–±—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏—Ö –ø—Ä–∏ –ø–æ–º–æ—â–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ ==
func compareTypesEquatable <T:Equatable>(value1: T,value2: T){
    if value1 == value2{
        print("value 1 is equal to value 2")
    }else{
        print("value 1 isn't equal to value 2")
    }
}
compareTypesEquatable(value1: 10, value2: 10.5)
compareTypesEquatable(value1: 2.2, value2: 2.2)
compareTypesEquatable(value1: "one", value2: "one")
compareTypesEquatable(value1: "üé•", value2: "üé•")
compareTypesEquatable(value1: "üé•", value2: "üí∞")
